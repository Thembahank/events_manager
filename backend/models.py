import osfrom sqlalchemy import Column, String, Integer, create_enginefrom flask_sqlalchemy import SQLAlchemydatabase_name = "events"database_path = "postgres://{}/{}".format('localhost:5432', database_name)db = SQLAlchemy()'''setup_db(app)    binds a flask application and a SQLAlchemy service'''def setup_db(app, database_path=database_path):    app.config["SQLALCHEMY_DATABASE_URI"] = database_path    app.config["SQLALCHEMY_TRACK_MODIFICATIONS"] = False    db.app = app    db.init_app(app)    db.create_all()class Creator(db.Model):    __tablename__ = 'creator'    id = Column(Integer, primary_key=True)    name = Column(String)    gender = Column(String)    age = Column(String)    phone = Column(String)    def __init__(self, type):        self.type = type    def format(self):        return {            'id': self.id,            'name': self.name,            'gender': self.gender,            'age': self.age,            'phone': self.phone,        }class Event(db.Model):    __tablename__ = 'event'    id = Column(Integer, primary_key=True)    title = Column(String)    event_date = Column(String)    category = Column(String)    creator_id = db.Column(db.Integer, db.ForeignKey(Creator.id), nullable=False)    creator = db.relationship('Creator', backref=db.backref('events', lazy=True))    def __init__(self, title, event_date, category):        self.title = title        self.event_date = event_date        self.category = category    def insert(self):        db.session.add(self)        db.session.commit()    def update(self):        db.session.commit()    def delete(self):        db.session.delete(self)        db.session.commit()    def format(self):        return {            'id': self.id,            'title': self.question,            'event_date': self.answer,            'category': self.category,        }